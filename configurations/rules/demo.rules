import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.model.script.actions.Timer

var Number counter = 1
var Timer timer = null

var Timer timerPanOnHotplate = null
var Timer timerHotplateWithoutPan = null


/**
* Light up the arduino light at start up.
*/
/*
rule "Open light1"
     when
	System started
     then
	sendCommand(Arduino, "SET Led1 ON;")
end
*/

/**
* Arduino -> Openhab
*/
rule "Mail Box"
  when Item Arduino received update then
       /*1585 1570*/
      var String state = Arduino.state.toString
      
      logInfo("MailBox", "Arduino state: " + Arduino.state) 
      if (state.contains("MailboxOpenedDoor")){ 
	println("DEBUG: Door opened.");
      } else if(state.contains("MailboxHeight")){
      	var int EMPTY = 2090;
	var int LETTER = 2030;

	var int valuePos = state.indexOf(":")+1
    	var int height = Integer::parseInt(state.mid(valuePos, state.indexOf(';')-valuePos))
	println("DEBUG: Mailbox height: "+height)
	var String mailboxState = ""

	if(height >= EMPTY){
	   mailboxState = "Empty mailbox"
	   postUpdate(Led1, OFF)
	   postUpdate(Led2, OFF)
	} else if(height >= LETTER){
	   mailboxState = "Letter detected"
	   postUpdate(Led1, ON)
	   postUpdate(Led2, OFF)
	} else {
	   mailboxState = "Package detected"
	   postUpdate(Led1, OFF)
	   postUpdate(Led2, ON)
	}

	println("Mailbox: " + mailboxState)
        postUpdate(Mailbox, mailboxState)
      
      } else if(state.contains("MailboxLightDetected")){      
	println("DEBUG: Light detected.")
      }
  end


/**
* Arduino -> Openhab
*/
rule "Switch Led1"
 when 
      Item Led1 received update
      then
	sendCommand(Arduino, "SET Led1 " + (if(Led1.state == ON) "ON;" else "OFF;"))
	println("ok : Arduino received update " + Led1.state)
end

rule "Switch Led2"
 when 
      Item Led2 received update
      then
	sendCommand(Arduino, "SET Led2 " + (if(Led2.state == ON) "ON;" else "OFF;"))
	println("ok : Arduino received update " + Led2.state)
end


rule Timer
when
	Item Hotplate changed	
then
	var Number TIME_LIMIT_PAN_ON_HOTPLATE = 30
	var Number TIME_LIMIT_HOTPLATE_WITHOUT_PAN = 2

	/* Hotplate is ON */
	if(Hotplate.state == HotWithoutPan || Hotplate.state == HotWithPan){
		sendCommand(HotplateLed,ON)		
	}

	/* Hotplate is ON && there is nothing on it : */
	if(Hotplate.state == HotWithoutPan && timerHotplateWithoutPan == null) {
	        /* Cancel timer that detects a pan staying too much time on the hotplate */
	        if(timerPanOnHotplate != null && timerPanOnHotplate.cancel()) {
			timerPanOnHotplate = null
		}

		/* Starts timer to shutdown the hotplane after 2mins */
		timerHotplateWithoutPan = createTimer(now.plusMinutes(TIME_LIMIT_HOTPLATE_WITHOUT_PAN)) [|
			timerHotplateWithoutPan = null
			sendCommand(HotplateLed,ON) 
		]
	}

	// TODO: May have to change if state is divided in 2.

	/* Hotplate is on AND there is a pan on it */
	else if (Hotplate.state == HotWithPanWhitoutPresence && timerPanOnHotplate == null) {
	        /* Cancel timer that detects a hotplate without pan. */
	        if(timerHotplateWithoutPan != null && timerHotplateWithoutPan.cancel()) {
			timerHotplateWithoutPan = null
		}

		/* Starts a timer to detect a pan staying too much time on the hotplate */
		timerPanOnHotplate = createTimer(now.plusMinutes(TIME_LIMIT_HOTPLATE_WITHOUT_PAN)) [|
			timerPanOnHotplate = null
			sendCommand(AlarmHotplateLed,ON) 
		]
	} 
	
	/* Presence detected */
	else if(Hotplate.state == PresenceDetected){
	     /* Re-schedule the timer if there was one */
	     if(timerPanOnHotplate != null){
	     	timerPanOnHotplate.reschedule(now.plusMinutes(TIME_LIMIT_PAN_ON_HOTPLATE))
	     }
	     
	     /* If there was an alarm, stop it */
	     if(AlarmHotplateLed.state == ON){
	     	sendCommand(AlarmHotplateLed,OFF) 
	     }
	}
	
	/* Hotplate is off */
	else if (Hotplate.state == OFF){
	     	/* Stop all timers : */
		if(timerHotplateWithoutPan != null && timerHotplateWithoutPan.cancel()) {
			timerHotplateWithoutPan = null
		}
		if(timerPanOnHotplate != null && timerPanOnHotplate.cancel()) {
			timerPanOnHotplate = null
		}

		/* Shutdown hotplate led */
		sendCommand(HotplateLed, OFF) 		
	}

end

/**
* Try displaying string :
* // TODO: To remove  + push icons
*/
/*
rule Startup
when 
        System started
then
	var String mailboxState = "Letter detected"

	println("Mailbox: "+mailboxState)
        postUpdate(Mailbox, mailboxState)
end
*/